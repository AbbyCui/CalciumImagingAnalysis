#run the following in terminal 
python path/to/pythonFile, path/to/dataFile

Run these commands all at once (make sure to include a return at the end)
    python ProcessData.py "P0"
    python ProcessData.py "P1"
    python ProcessData.py "P2"
    python ProcessData.py "P3"
    "finished"

# raw screening of bad ROIs, also get a sense of how to analyze
    plot.py P0 5000 10000  (this plots frames 5000 to 10000)
   Input arguments are: Plot.py ["plane"] [start] [stop]
    python ProcessData.py "P0"
    python Plot.py "P0" 1 all
    python Plot.py "P1" 1 all
    python Plot.py "P2" 1 all
    python Plot.py "P3" 1 all
    python Plot.py "P4" 1 all
    "finished"

    secondsperinch (100-800 are good numbers). Default is 800, but you can change it in the constant file if desired


# manually remove ROIs with too much z-drift, or dead ones
# (put ROI number of the bad ROIs in an excel sheet, with "P0", 
# "P1" etc as first row, then ROI numbers in the corresponding columns)
# this function can also do AUC now, check the constant file enable or disable features

    python MaxResponse.py "P0"
    python MaxResponse.py "P1"
    python MaxResponse.py "P2"
    python MaxResponse.py "P3"
    python MaxResponse.py "P4"
    python StitchFiles.py "#35" "MaxResponse"
    "finished"

# If you're looking at pulling traces, you can make a csv of the 'good' cells, run these scripts and pull out only the traces you want
Python Rename20xAvg.py
Python TemplateMatching.py 

##you can also pass the filter name in the terminal if you want to chain a bunch of different filters and then let it run. e.g.
Python TemplateMatching.py "500_Control GRPR Positive Int"
Python TemplateMatching.py "500_Control GRPR Neg Int"
"finished"


# quantify SpikePattern.py to identify the AUC, sd and median of spike time of all ROIs for 
# one single given stimuli window
# if you're interested in stimuli #19, then input 1 as the last argument
# currently, the experiment number input from terminal must match that in constant.py

    python SpikePattern.py "#462" "P0" 19
    python SpikePattern.py "#462" "P1" 19
    python SpikePattern.py "#462" "P2" 19
    python SpikePattern.py "#462" "P3" 19
    python SpikePattern.py "#462" "P4" 19
    python StitchFiles.py "#462" "SpikePattern"
    "finished"

# use Peri-Stimulus to extract ROIs of interest at the time window of interest
# extracts the data withint peri-stimulus window (output one file ending with "Peri-stim"), 
# and calculate mean, median, 95% range for each frame (output another file ending with "avg Peri-stim")

    python Peri-Stimulus.py "P0"
    python Peri-Stimulus.py "P1"
    python Peri-Stimulus.py "P2"
    python Peri-Stimulus.py "P3"
    python Peri-Stimulus.py "P4"
    python StitchFiles.py "#40" "full Peri-stim test"

# some free area for you to organize and copy-paste your pipeline
    python ProcessData.py "P0"
    python Plot.py "P0" 1 all

    python ProcessData.py "P1"
    python ProcessData.py "P2"
    python ProcessData.py "P3"
    python ProcessData.py "P4"
    python Plot.py "P1" 1 all
    python Plot.py "P2" 1 all
    python Plot.py "P3" 1 all
    python Plot.py "P4" 1 all